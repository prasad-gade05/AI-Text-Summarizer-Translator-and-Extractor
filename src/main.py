import eel
from googletrans import LANGUAGES
from googletrans import Translator
from transformers import pipeline
from PIL import Image
from pytesseract import pytesseract
import PyPDF2

eel.init("templates")


# TRANSLATOR
# this function is called from js when the web page is loaded, this is used to fetch the list of languages from the
# library and pass it to js in order to display the list in web page for selection
@eel.expose
def getLanguagesPY():
    languageValues = list(LANGUAGES.values())  # list of languages example hindi, english
    languagesString = ", ".join(languageValues)  # string of languages separated by comma
    languageKeys = list(LANGUAGES.keys())  # list of languages example hi, en
    languagesKeysString = ", ".join(languageKeys)  # list of languages separated by comma
    eel.loadLanguagesJS(languagesString, languagesKeysString)  # passing both the strings to js


# this function accepts the text to translate, source language and the target language
@eel.expose
def translatePY(ipText, sourceLang, destLang):
    translator = Translator()  # initialize translator object
    try:
        translation = translator.translate(ipText, src=sourceLang, dest=destLang)  # perform translation

        if translation.text:  # if the text is translated successfully then pass it to js
            translatedText = translation.text
            eel.showTranslationJS(translatedText)
        else:
            eel.showTranslationJS("Translation failed. Empty response.")  # print error in js

    except Exception as e:
        eel.showTranslationJS(f"Translation error: {e}")  # print error in js


# SUMMARIZER

# initializes a summarization pipeline
summarizer = pipeline("summarization", model="Falconsai/text_summarization")


@eel.expose
def summarizePY(ipText, wordRange):
    wordRange = int(wordRange)
    # defining the range of words for least, average and most words summary option
    if wordRange == 1:
        min_length = 10
        max_length = 50
    elif wordRange == 2:
        min_length = 30
        max_length = 100
    elif wordRange == 3:
        min_length = 100
        max_length = 150
    else:
        raise ValueError("Invalid wordRange value")

    # following 5 lines convert the entire text into chunks where 'parts' is a list which has nested lists
    # each nested list has max 200 words, this is done because the model cant process very large text all at once
    words = ipText.split()
    parts = []
    chunk_size = 200

    for i in range(0, len(words), chunk_size):
        parts.append(words[i:i + chunk_size])

    # summary model is run on each chunk and result is appended to summarizedText
    summarizedText = []
    for i in range(len(parts)):
        summary_result = summarizer(" ".join(parts[i]), max_length=max_length, min_length=min_length, do_sample=False)[
            0]
        # this summary_result is generated by the ml model in form of dictionary where summary_text is key and actual
        # summary is value
        summarizedText.append(summary_result['summary_text'])
    eel.showSummarizationJS(' '.join(summarizedText))


# EXTRACTOR
class FileReader:

    # initializes the object with the path of tesseract.exe
    def __init__(self, tesseract_cmd_path):
        pytesseract.tesseract_cmd = tesseract_cmd_path

    def extract_image_text(self, image_path):
        img = Image.open(image_path)  # open the image
        available_languages = pytesseract.get_languages()  # get list of languages supported by pytesseract
        default_lang = available_languages[0] if available_languages else 'eng'
        # selects the default language, if no language is available then selects english
        extracted_text = pytesseract.image_to_string(img, lang=default_lang)
        return extracted_text

    def extract_pdf_text(self, pdf_path):
        with open(pdf_path, 'rb') as pdf_file:  # opens pdf in read bytes mode
            reader = PyPDF2.PdfReader(pdf_file)
            pdf_text = []

            for page in reader.pages:  # iterates for every page in pdf
                content = page.extract_text()  # extracts the text
                pdf_text.append(content)
            return pdf_text


file_reader = FileReader(r'C:\Program Files\Tesseract-OCR\tesseract.exe')


@eel.expose
def extractText(filePath):
    if filePath.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):  # checks if selected file is image
        text = file_reader.extract_image_text(filePath)
    elif filePath.lower().endswith('.pdf'):  # checks if selected image is pdf
        text = file_reader.extract_pdf_text(filePath)
    else:
        text = "Unsupported file type."

    eel.displayResultJS(text)


eel.start("index.html")
